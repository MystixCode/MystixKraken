#!/usr/bin/python3
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk, Gdk
import subprocess
from subprocess import Popen
from subprocess import PIPE
import struct

channel='0'
mode='0'
colors = []
speed = None

def convert_to_hex(rgba_color) :
    red = int(rgba_color.red*255)
    green = int(rgba_color.green*255)
    blue = int(rgba_color.blue*255)
    return '0x{r:02x}{g:02x}{b:02x}'.format(r=red,g=green,b=blue)

def speedbutton(grid):
    lbl_speed=Gtk.Label(label="Speed: ")
    grid.attach(lbl_speed, 3,0,1,1)
    combo_speed=Gtk.ComboBox()
    speed_store = Gtk.ListStore(int, str)
    speed_store.append([0, "Slowest"])
    speed_store.append([1, "Slower"])
    speed_store.append([2, "Normal"])
    speed_store.append([3, "Faster"])
    speed_store.append([4, "Fastest"])
    combo_speed = Gtk.ComboBox.new_with_model_and_entry(speed_store)
    combo_speed.connect("changed", combo_speed_changed)
    combo_speed.set_entry_text_column(1)
    grid.attach(combo_speed, 4,0,1,1)

def color1button(grid, pos):
    lbl_color1=Gtk.Label(label="Color1: ")
    grid.attach(lbl_color1, 3,pos,1,1)
    btn_color1=Gtk.ColorButton()
    btn_color1.connect("color-set", on_color_chosen)
    grid.attach(btn_color1, 4,pos,1,1)

def cb_logo_or_ring_changed(cb):
    global channel, mode, colors, speed
    colors = []
    grid = builder.get_object("grid1")
    grid.remove_column(4)
    grid.remove_column(3)
    grid.remove_column(2)
    cb_logo=builder.get_object("cb_logo").get_active()
    cb_ring=builder.get_object("cb_ring").get_active()
    if (cb_logo==True) and (cb_ring==True):
        channel="sync"
        for id, label in enumerate(['Fixed', 'Breathing', 'Fading', 'Pulse', 'Spectrum-Wave']):
            btn = Gtk.Button(name="btn", label=label)
            btn.connect("clicked", mode_btn_clicked)
            grid.attach(btn, 2,id,1,1)
    elif (cb_logo==True):
        channel="logo"
        for id, label in enumerate(['Fixed', 'Breathing', 'Fading',  'Pulse', 'Spectrum-Wave']):
            btn = Gtk.Button(name="btn", label=label)
            btn.connect("clicked", mode_btn_clicked)
            grid.attach(btn, 2,id,1,1)
    elif (cb_ring==True):
        channel="ring"
        for id, label in enumerate(['Fixed', 'Breathing', 'Fading', 'Marquee', 'Covering-Marquee', 'Pulse', 'Spectrum-Wave', 'Alternating', 'Moving-Alternating', 'Tai-Chi', 'Water-Cooler', 'Loading']):
            btn = Gtk.Button(name="btn", label=label)
            btn.connect("clicked", mode_btn_clicked)
            grid.attach(btn, 2,id,1,1)
    grid.show_all()

def mode_btn_clicked(button):
    global channel, mode, colors, speed
    colors = []
    grid = builder.get_object("grid1")
    grid.remove_column(4)
    grid.remove_column(3)
    mode=button.get_label()
    if mode == "Fixed":
        color1button(grid, 0)
    elif mode == "Spectrum-Wave":
        speedbutton(grid)
    else:
        speedbutton(grid)
        color1button(grid, 1)
    btn_apply=Gtk.Button(name="apply", label="Apply")
    btn_apply.connect("clicked", apply_btn_clicked)
    grid.attach(btn_apply, 4,10,1,1)
    grid.show_all()

def on_color_chosen(button):
    global channel, mode, colors, speed
    grid = builder.get_object("grid1")
    btn_apply=0
    if not (btn_apply==0):
        grid.remove(btn_apply)
    choosencolor=button.get_rgba()
    rgba=button.get_rgba()
    choosencolor=convert_to_hex(rgba)[2:]
    if (mode in ['Breathing', 'Fading', 'Covering-Marquee', 'Pulse']): #add here all modes with 8 color
        colorcount = len(colors)
        if (colorcount < 8):
            colors.append(choosencolor)
            colorcount += 1
            if (colorcount < 8):
                grid.attach(Gtk.Label(label="Color" + str(colorcount+1) + ": "), 3,colorcount+1,1,1)
                btn_color=Gtk.ColorButton()
                btn_color.connect("color-set", on_color_chosen)
                grid.attach(btn_color, 4,colorcount+1,1,1)
    elif (mode in ['Alternating', 'Moving-Alternating', 'Tai-Chi']): #add here all modes with 2 color
        colorcount = len(colors)
        if (colorcount < 2):
            colors.append(choosencolor)
            colorcount += 1
            if (colorcount < 2):
                grid.attach(Gtk.Label(label="Color" + str(colorcount+1) + ": "), 3,colorcount+1,1,1)
                btn_color=Gtk.ColorButton()
                btn_color.connect("color-set", on_color_chosen)
                grid.attach(btn_color, 4,colorcount+1,1,1)
    else:
        colors.append(choosencolor)
    grid.show_all()

def combo_speed_changed(combo_speed):
    global channel, mode, colors, speed
    tree_iter = combo_speed.get_active_iter()
    if tree_iter is not None:
        model = combo_speed.get_model()
        row_id, name = model[tree_iter][:2]
        speed="%s" % (name)
    grid = builder.get_object("grid1")
    btn_apply=0
    if not (btn_apply==0):
        grid.remove(btn_apply)
    btn_apply=Gtk.Button(name="apply", label="Apply")
    btn_apply.connect("clicked", apply_btn_clicked)
    grid.attach(btn_apply, 4,10,1,1)
    grid.show_all()

def apply_btn_clicked(button):
    global channel, mode, colors, speed
    cmd = ["liquidctl", "set", channel, "color", mode.lower()]
    for id, color in enumerate(colors):
        cmd.append(color)
    if not (speed==None):
        cmd.append('--speed')
        cmd.append(speed.lower())
    runcmd(cmd) #colors = [] ###TODO: fix color reset and speed reset bugs

def dialog_response(widget,x):
    widget.destroy()

def runcmd(cmd):
    p=subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, encoding="utf-8", errors=None)
    err = p.stderr.strip() #out = p.stdout.strip()
    msg = 'Done!'
    if not err == '':
        msg = err
    w = builder.get_object("window1")
    messagedialog = Gtk.MessageDialog(name='dialogwidget', parent=w,modal=True,message_type='info',buttons=Gtk.ButtonsType.OK,text=msg)
    messagedialog.connect("response", dialog_response)
    messagedialog.show()

builder = Gtk.Builder() ## TODO: check if right liquidctl version is installed if not install #python3 -m pip install -e .
builder.add_from_file("MystixKraken.glade")
w = builder.get_object("window1")
w.set_title('MystixKraken')
cb_logo = builder.get_object("cb_logo")
cb_logo.connect("toggled", cb_logo_or_ring_changed)
cb_ring = builder.get_object("cb_ring")
cb_ring.connect("toggled", cb_logo_or_ring_changed)
w.connect('destroy', Gtk.main_quit)
w.show_all()
Gtk.main()
